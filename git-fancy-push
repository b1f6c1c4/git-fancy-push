#!/bin/bash

if [ -z "$VERBOSE" ]; then
    VERBOSE=
else
    VERBOSE=YES
fi

set -euo pipefail

if [ -r ~/.git-fancy-push ]; then
    TOKEN="$(cat ~/.git-fancy-push)"
else
    printf 'Error: \e[36mgit-fancy-push\e[0m needs a GitHub token to run!\n' >&2
    printf 'Error: Please put your GitHub personal access token to \e[33m~/.git-fancy-push\e[0m\n' >&2
    printf 'Error: You can get one from here: \e[35mhttps://github.com/settings/tokens\e[0m\n' >&2
    exit 1
fi

peek() {
    if [ -n "$VERBOSE" ]; then
        tee /dev/stderr
    else
        cat -
    fi
}

if [ "$#" -gt 0 ] && [ "$1" = "--update-ref" ]; then
    shift
    [ -n "$VERBOSE" ] && printf '%q --update-ref' "$0" >&2
    [ -n "$VERBOSE" ] && printf ' %q' "$@" >&2
    [ -n "$VERBOSE" ] && printf '\n' >&2
    GH="$1"
    URL="$2"
    REF="$3"
    SHA1="$4"
    if [ "$GH" = "--" ]; then
        printf 'Error: \e[31mWe are so sorry that we only support GitHub.\e[0m\n' >&2
        printf 'Error: If you wish, you can open an issue on https://github.com/b1f6c1c4/git-fancy-push/issues.' >&2
        printf 'Notice: \e[33mSkipped git fancy-push %s %s:%s\e[0m\n' "$URL" "$SHA1" "$REF" >&2
        exit 0
    fi
    "$0" --upload-commit "$GH" "$URL" "$SHA1"
    if jq -n '{ ref: $ref, sha: $sha }' \
        --arg ref "$REF" \
        --arg sha "$SHA1" \
        | peek \
        | curl -fs -d @- -X POST "https://api.github.com/repos/$GH/git/refs" -H "Authorization: token $TOKEN" \
        | peek >/dev/null; then
        printf 'Notice: \e[32mPush (creation) successful!\e[0m (to %s)\n' "$URL" >&2
        printf 'Notice: %s is now at %s.\n' "$REF" "$SHA1" >&2
        printf 'Notice: Please git fetch by yourself.\n' >&2
        exit 0
    fi
    PREV="$(curl -fsS "https://api.github.com/repos/$GH/git/$REF" -H "Authorization: token $TOKEN" \
        | peek \
        | jq -r '.object.sha')"
    if jq -n '{ force: false, sha: $sha }' \
        --arg sha "$SHA1" \
        | peek \
        | curl -fs -d @- -X PATCH "https://api.github.com/repos/$GH/git/$REF" -H "Authorization: token $TOKEN" \
        | peek >/dev/null; then
        printf 'Notice: \e[32mPush successful!\e[0m (to %s)\n' "$URL" >&2
        printf 'Notice: %s is now at %s.\n' "$REF" "$SHA1" >&2
        printf 'Notice: %s was previously at %s.\n' "$REF" "$PREV" >&2
        printf 'Notice: Please git fetch by yourself.\n' >&2
        exit 0
    fi
    printf 'Warning: \e[33mDoing forced push on %s\e[0m\n' "$REF" >&2
    if jq -n '{ force: true, sha: $sha }' \
        --arg sha "$SHA1" \
        | peek \
        | curl -fs -d @- -X PATCH "https://api.github.com/repos/$GH/git/$REF" -H "Authorization: token $TOKEN" \
        | peek >/dev/null; then
        printf 'Notice: \e[32mForced push successful!\e[0m (to %s)\n' "$URL" >&2
        printf 'Notice: %s is now at %s.\n' "$REF" "$SHA1" >&2
        printf 'Notice: %s was previously at %s.\n' "$REF" "$PREV" >&2
        printf 'Notice: Please git fetch by yourself.\n' >&2
        exit 0
    fi
    exit 0
fi

if [ "$#" -gt 0 ] && [ "$1" = "--upload-commit" ]; then
    shift
    [ -n "$VERBOSE" ] && printf '%q --upload-commit' "$0" >&2
    [ -n "$VERBOSE" ] && printf ' %q' "$@" >&2
    [ -n "$VERBOSE" ] && printf '\n' >&2
    GH="$1"
    URL="$2"
    SHA1="$3"
    if curl -fs "https://api.github.com/repos/$GH/git/commits/$SHA1" -H "Authorization: token $TOKEN" \
        | peek >/dev/null; then
        printf 'Notice: \e[33mCommit %s is already on GitHub.\e[0m\n' "$SHA1" >&2
        exit 0
    fi
    [ -n "$VERBOSE" ] && printf 'Info: Commit %s non-existant, will upload later.\n' "$SHA1" >&2
    git show -s --format="%P" "$SHA1" \
        | xargs -r -n 1 "$0" --upload-commit "$GH" "$URL"
    TREE="$(git rev-parse "$SHA1^{tree}")"
    if ! curl -fs -o /dev/null "https://api.github.com/repos/$GH/git/trees/$TREE" -H "Authorization: token $TOKEN"; then
        [ -n "$VERBOSE" ] && printf 'Info: Uploading tree %s.\n' "$TREE" >&2
        TC="$(GIT_AUTHOR_NAME=author \
            GIT_AUTHOR_EMAIL=author@example.com \
            GIT_AUTHOR_DATE='1970-01-01T00:00:00Z' \
            GIT_COMMITTER_NAME=committer \
            GIT_COMMITTER_EMAIL=committer@example.com \
            GIT_COMMITTER_DATE='1970-01-01T00:00:00Z' \
            git commit-tree "$SHA1^{tree}" -m 'tmp')"
        git push --force "$URL" "$TC:refs/tags/git-fancy-push/tmp-$$"
        git push --delete "$URL" "refs/tags/git-fancy-push/tmp-$$"
        [ -n "$VERBOSE" ] && printf 'Info: Tree %s uploaded.\n' "$TREE" >&2
    fi
    [ -n "$VERBOSE" ] && printf 'Info: Uploading commit %s.\n' "$SHA1" >&2
    git cat-file commit "$SHA1" | awk '
        BEGIN { a=0; }
        /^$/ { a=1; }
        { if (a >= 2) print $0; if (a) a++; }
    ' | jq -Rs '
            {
                message: .,
                tree: $tree,
                parents: $ARGS.positional,
                author: { name: $an, email: $ae, date: $aI },
                committer: { name: $cn, email: $ce, date: $cI },
                signature: $gpgsig,
            }
            | if $gpgsig == "" then del(.signature) else . end
        ' \
            --arg tree "$(git rev-parse "$SHA1^{tree}")" \
            --arg an "$(git show -s --format="%an" "$SHA1")" \
            --arg ae "$(git show -s --format="%ae" "$SHA1")" \
            --arg aI "$(git show -s --format="%aI" "$SHA1")" \
            --arg cn "$(git show -s --format="%cn" "$SHA1")" \
            --arg ce "$(git show -s --format="%ce" "$SHA1")" \
            --arg cI "$(git show -s --format="%cI" "$SHA1")" \
            --arg gpgsig "$(git cat-file commit "$SHA1" | awk '
                    BEGIN { a=0; }
                    ! /^ / { if (a) exit; }
                    /^gpgsig / { a=1; sub(/^gpgsig /, "", $0); print $0; }
                    { if (a) print $0; }
                ')" \
            --args $(git show -s --format="%P" "$SHA1") \
        | peek \
        | curl -fsS -d @- -X POST "https://api.github.com/repos/$GH/git/commits" -H "Authorization: token $TOKEN" \
        | peek \
        | jq -r '.sha' | (
            read -r sh;
            if ! [ "$SHA1" = "$sh" ]; then
                printf 'Error: \e[31mCannot upload commit %s: SHA-1 mismatch.\e[0m\n' "$SHA1" >&2
                printf 'Error: Usually it'\''s due to the mergetag header.\n' >&2
                exit 1
            fi
            )
    printf 'Notice: Commit %s uploaded successfully.\n' "$SHA1" >&2
    exit 0
fi

look_for() {
    T="$1"
    shift
    while [ "$#" -gt 0 ]; do
        [ "$1" = "$T" ] && return 0
        shift
    done
    return 1
}

(look_for "-v" "$@" || look_for "--verbose" "$@") && export VERBOSE=YES

# Run git push
TLOG="$(mktemp)"
finish_2() {
    rm -f "$TLOG"
}
trap finish_2 EXIT
set +e
git push --porcelain "$@" | tee "$TLOG"
R="$?"
set -e

# Check if no shallow update
grep -q '\s\[remote rejected\] (shallow update not allowed)$' "$TLOG" || exit "$R"

printf 'Notice: \e[35mKeep Calm!\e[0m \e[36mgit-fancy-push\e[0m is working on it.\n' >&2

awk '
    /^To / { gh="--"; u=$2; }

    /^To github.com:/ {
        gh=$2;
        sub(/^github.com:/, "", gh);
        sub(/.git$/, "", gh);
        u="git@github.com:" gh ".git";
    }

    /^To https:\/\/github.com\// {
        gh=$2;
        sub(/https:\/\/github.com\//, "", gh);
        sub(/.git$/, "", gh);
        u="https://github.com/" gh ".git";
    }

    /^!\s\S+:\S+\s\[remote rejected\] \(shallow update not allowed\)$/ {
        s=$2; sub(/:.*$/, "", s);
        t=$2; sub(/^.*:/, "", t);
        printf "%s %s %s ", gh, u, t;
        if (system("git rev-parse " s) != 0) {
            exit 1;
        }
    }
' "$TLOG" \
    | peek \
    | xargs -r -L 1 "$0" --update-ref

printf 'Notice: \e[35mAll shallow-update-not-allowed problem(s) has been fixed!\e[0m\n' >&2
printf 'Notice: Thanks for using \e[36mgit-fancy-push\e[0m.\n' >&2
